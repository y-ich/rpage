// Generated by CoffeeScript 1.9.3

/*
 * A plugin for making Bootstrap's pagination more responsive
 * original: https://github.com/auxiliary/rpage
 */

(function() {
  'use strict';
  var isNextOrPrevLink, rPage;

  isNextOrPrevLink = function(element) {
    var text;
    text = element.text().trim();
    return text === '»' || text === '«' || element.hasClass('pagination-prev') || element.hasClass('pagination-next');
  };

  rPage = (function() {
    function rPage($container) {
      var resizeTimer, self;
      this.$container = $container;
      this.els = this.$container.find('li');
      this.defaultLarge = this.$container.hasClass('pagination-lg');
      this.label();
      this.makeResponsive();
      resizeTimer = null;
      self = this;
      $(window).resize(function() {
        clearTimeout(resizeTimer);
        return resizeTimer = setTimeout(function() {
          return self.makeResponsive();
        }, 100);
      });
    }

    rPage.prototype.label = function() {
      var $el, active_index, el, j, len, ref;
      active_index = this.els.filter('.active').index();
      ref = this.els;
      for (j = 0, len = ref.length; j < len; j++) {
        el = ref[j];
        $el = $(el);
        $el.addClass(!isNextOrPrevLink($el) ? "page-away-" + (Math.abs(active_index - $el.index())) : $el.index() > active_index ? 'right-etc' : 'left-etc');
      }
    };

    rPage.prototype.isTooLong = function() {
      var MARGIN;
      MARGIN = 10;
      return this.calculateWidth() > this.$container.parent().innerWidth() - MARGIN;
    };

    rPage.prototype.makeResponsive = function() {
      this.reset();
      if (this.defaultLarge && this.isTooLong()) {
        this.$container.removeClass('pagination-lg');
      }
      while (this.isTooLong()) {
        if (!this.removeOne()) {
          break;
        }
      }
    };

    rPage.prototype.isRemovable = function(element) {
      var index;
      if (isNextOrPrevLink(element)) {
        return false;
      }
      index = element.index();
      if (index === 1 || isNextOrPrevLink(this.$container.find('li').eq(index + 1))) {
        return false;
      }
      return element.text().trim() !== '...';
    };

    rPage.prototype.removeOne = function() {
      var active_index, candid_candidate, candidate, candidates, farthest_index, i, j, k, len, next, prev, ref;
      active_index = this.els.filter('.active').index();
      farthest_index = this.$container.find('li').length - 1;
      next = active_index + 1;
      prev = active_index - 1;
      for (i = j = ref = farthest_index - 1; ref <= 0 ? j < 0 : j > 0; i = ref <= 0 ? ++j : --j) {
        candidates = this.els.filter(".page-away-" + i).filter(function() {
          return this.style['display'] !== 'none';
        });
        for (k = 0, len = candidates.length; k < len; k++) {
          candidate = candidates[k];
          candid_candidate = $(candidate);
          if (this.isRemovable(candid_candidate)) {
            candid_candidate.css('display', 'none');
            if (this.needsEtcSign(active_index, farthest_index - 1)) {
              this.els.eq(farthest_index - 2).before('<li class="disabled removable"><span>...</span></li>');
            }
            if (this.needsEtcSign(1, active_index)) {
              this.els.eq(1).after('<li class="disabled removable"><span>...</span></li>');
            }
            return true;
          }
        }
      }
      return false;
    };

    rPage.prototype.needsEtcSign = function(el1_index, el2_index) {
      var $li, el, hasEtcSign, hasHiddenElement, i, j, ref, ref1;
      if (el2_index - el1_index <= 1) {
        return false;
      }
      hasEtcSign = false;
      hasHiddenElement = false;
      $li = this.$container.find('li');
      for (i = j = ref = el1_index + 1, ref1 = el2_index; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {
        el = $li.eq(i);
        if (el.css('display') === 'none') {
          hasHiddenElement = true;
        }
        if (el.text() === '...') {
          hasEtcSign = true;
        }
      }
      return hasHiddenElement && !hasEtcSign;
    };

    rPage.prototype.reset = function() {
      if (this.defaultLarge) {
        this.$container.addClass('pagination-lg');
      }
      this.els.css('display', '');
      this.$container.find('li').filter('.removable').remove();
    };

    rPage.prototype.calculateWidth = function() {
      var e, j, len, ref, width;
      width = 0;
      ref = this.$container.parent().children();
      for (j = 0, len = ref.length; j < len; j++) {
        e = ref[j];
        width += $(e).outerWidth(true);
      }
      return width;
    };

    return rPage;

  })();

  (function(jQuery) {
    var $;
    $ = jQuery;
    return $.fn.rPage = function() {
      var $this, i, j, ref, results;
      $this = $(this);
      results = [];
      for (i = j = 0, ref = $this.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        results.push(new rPage($($this[i])));
      }
      return results;
    };
  })(jQuery);

}).call(this);
